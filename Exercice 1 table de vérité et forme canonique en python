from itertools import product


def table_de_verite(variables, fonction):
    n = len(variables)
    table = list(product([0, 1], repeat=n))

    print("Table de vérité :")
    print("--------------")
    print(fonction_logique)
    print("--------------")
    for row in table:
        context = {variables[i]: row[i] for i in range(n)}
        result = eval(fonction, {}, context)
        print(" | ".join([str(x) for x in row]), "|", int(result))
    return table


def premiere_forme_canonique(variables, table):
    terms = []
    for row in table:
        if row[-1] == 1:
            term = []
            for i, val in enumerate(row[:-1]):
                if val == 1:
                    term.append(variables[i])
                elif val == 0:
                    term.append(f"non({variables[i]})")
            terms.append(" OU ".join(term))
    expression = " ET ".join(terms)
    print("Première forme canonique:")
    print(expression)


def deuxieme_forme_canonique(variables, table):
    
    
    terms = []
    for row in table:
        if row[-1] == 0:
            term = []
            for i, val in enumerate(row[:-1]):
                if val == 0:
                    term.append(variables[i])
                elif val == 1:
                    term.append(f"non({variables[i]})")
            terms.append(" ET ".join(term))
    expression = " OU ".join(terms)
    print("Deuxième forme canonique:")
    print(expression)


variables = input("Entrez les noms des variables séparées par des  espaces : ").split()
fonction_logique = input("Entrez la fonction logique en utilisant 'and ',  'or' et 'not' separer par des espaces : ")


table = table_de_verite(variables, fonction_logique)

premiere_forme_canonique(variables, table)
deuxieme_forme_canonique(variables, table)
